import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++) arr[i]=sc.nextInt();
        sort(arr,0,n-1);
        double mean=mean(arr,n);
        double arr2[]=new double[n];
        for(int i=0;i<n;i++) arr2[i]=(arr[i]-mean)*(arr[i]-mean);
        System.out.println(Math.sqrt(mean(arr2,n)));//Math.sqrt(mean(arr,n)));
    }
    public static double mean(int arr[],int n)
    {
        double mean=0;
        for(int i=0;i<n;i++)
        mean+=arr[i];
        mean/=1.0*n;
        //int meanInt=(int)mean;
        //mean = (float)(meanInt*10);
        //mean/=10.0;
        return mean;
    }
    public static double mean(double arr[],int n)
    {
        double mean=0;
        for(int i=0;i<n;i++)
        mean+=arr[i];
        mean/=1.0*n;
        //int meanInt=(int)mean;
        //mean = (float)(meanInt*10);
        //mean/=10.0;
        return mean;
    }
    static int partition(int arr[], int low, int high)
    {
        int pivot = arr[high]; 
        int i = (low-1); // index of smaller element
        for (int j=low; j<high; j++)
        {
            // If current element is smaller than or
            // equal to pivot
            if (arr[j] <= pivot)
            {
                i++;
 
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
 
        // swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
 
        return i+1;
    }
 
 
    /* The main function that implements QuickSort()
      arr[] --> Array to be sorted,
      low  --> Starting index,
      high  --> Ending index */
    static void sort(int arr[], int low, int high)
    {
        if (low < high)
        {
            /* pi is partitioning index, arr[pi] is 
              now at right place */
            int pi = partition(arr, low, high);
 
            // Recursively sort elements before
            // partition and after partition
            sort(arr, low, pi-1);
            sort(arr, pi+1, high);
        }
    }
}
