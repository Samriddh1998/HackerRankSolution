import java.io.*;
import java.util.*;

public class Solution {
    
    public static  float medean(int arr[],int l,int u)
    {
        int n=u-l;
        int medean=(arr[l+n/2]+arr[l+(n-1)/2]);
            return (float)(medean/2.0);
    }
    
    public static  void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
            arr[i]=sc.nextInt();
        quickSort(arr,0,n-1);
        System.out.println((int)medean(arr,0,n/2));
        System.out.println((int)medean(arr,0,n));
        System.out.println((int)medean(arr,(n+1)/2,n));
    }
   

    //using quicksort algo

    static int partition (int arr[], int low, int high)
    {
    int pivot = arr[high];    // pivot
    int i = (low - 1);  // Index of smaller element
 
    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap(arr,i,j);
        }
    }
    swap(arr,i+1,high);
    return (i + 1);
}
    static void swap(int arr[],int i,int j)
    {
        int t=arr[i];
        arr[i]=arr[j];
        arr[j]=t;
    }
 
   
    static void quickSort(int arr[], int low, int high)
    {
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
}
